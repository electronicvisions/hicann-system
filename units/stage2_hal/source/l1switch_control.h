#pragma once
// Company         :   kip                      
// Author          :   Andreas Gruebl            
// E-Mail          :   agruebl@kip.uni-heidelberg.de
//                    			
// Filename        :   l1switch_control.h                
// Project Name    :   p_facets
// Subproject Name :   s_hicann1            
//                    			
// Create Date     :   Tue Jun 24 08
// Last Change     :   Mon Aug 04 08    
// by              :   agruebl        
//------------------------------------------------------------------------

#include "config.h" // automatically generated by waf build flow, used for HICANN version stuff
#include "ctrlmod.h"

#include "logger.h"

namespace facets {

/// L1SwitchControl class.
/// Access to Layer 1 Crossbar and Synapse switch controller modules++-
class L1SwitchControl : public CtrlModule
{

private:
		
	std::vector<uint> config;  //!< ???
	
	virtual std::string ClassName() { return "L1SwitchControl"; };

public:

	/// give pointer to utilized LinkLayer, start and range of this module's address range.
	L1SwitchControl(
		switch_loc sl,  //!< location of the layer 1 switch accroding to (hardware_base.h)
		Stage2Ctrl* c,  //!< pointer to parent Stage2Ctrl class (i.e. HicannCtrl)
		uint ta, //!< associated OCP tagid 
		uint sa,  //!< Startaddress (OCP)
		uint ma  //!< Maximumadress (OCP)
		);
		
	~L1SwitchControl();

	switch_loc loc; ///< switch location this instance corresponds to

	// *** Layer 1 switch configuration memory ***

	/// write switch configuration of one row.
	int write_cfg(
		ci_addr_t rowaddr,  //!< row address mapped to ocp address
		std::vector<bool> cfg  //!< ???
		);
		
	/// ???	
	int write_cfg(
		ci_addr_t rowaddr,
		uint cfg  //!< ???
		);


	/// issue read command to read back switch configuration of one row.
	int read_cfg(
		ci_addr_t rowaddr
		);


	/// fetch read data resulting from read_cfg.
	void get_read_cfg(
		ci_addr_t & rowaddr,
		std::vector<bool>& cfg  //!< ???
		);
	
	/// ???		
	void get_read_cfg(
		ci_addr_t & rowaddr,
		uint& cfg  //!< ???
		);

	/// ???
	uint get_offs(
		switch_loc loc  //!< ???
		);

	/// ???
	switch_loc get_loc(
		uint addr  //!< ???
		);
	
	/// ???
	uint bitrotate (
		uint addr  //!< ???
		);
	
	/// config function, must be run after instance creation to read in current configuration
	void configure();
	
	/// writes zeros into all registers
	void reset();
	
	/// returns the std::hex code to write into register to connect these lines, also does sanity check
	uint transline(
		uint hor_line,  //!< number of a horizontal line
		uint ver_line  //!< number of a vertical line
		);
	
	/// single connect/disconnect of vertical and horizontal lines.
	void switch_connect(
		uint horiz_line,  //!< number of the horizontal line
		uint vert_line,  //!< number of the vertical line
		bool connect  //!< connect/disconnect
		);

	/// multiple connect/disconnect of vertical and horizontal lines.	
	void switch_connect(
		std::vector<uint> horiz_line,  //!< numbers of the horizontal lines
		std::vector<uint> vert_line,  //!< numbers of the vertical lines
		std::vector<bool> connect  //!< connect/disconnect
		);
	
	/// debugging function
	void print_config();
};

}  // end of namespace facets
 
